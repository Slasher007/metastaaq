import os
import pandas as pd
from datetime import datetime, timedelta
from pvlib.iotools import get_pvgis_hourly
from entsoe import EntsoePandasClient

def telecharger_donnees_pvgis_multi_annees(lat, lon, annee_debut=2020, annee_fin=2024):
    """
    T√©l√©charge les donn√©es de production PV horaire depuis PVGIS pour plusieurs ann√©es.
    """
    print(f"T√©l√©chargement des donn√©es PVGIS pour les ann√©es {annee_debut} √† {annee_fin}...")
    
    all_data = []
    
    for annee in range(annee_debut, annee_fin + 1):
        print(f"  ‚Üí T√©l√©chargement pour l'ann√©e {annee}...")
        try:
            # Appel √† l'API de PVGIS via la biblioth√®que pvlib
            data, metadata, inputs = get_pvgis_hourly(
                latitude=lat,
                longitude=lon,
                start=annee,
                end=annee,
                pvcalculation=True,
                peakpower=5000,  # 5000 kWc = 5 MWc
                loss=14,         # Pertes syst√®me en %
                mountingplace='free',
                surface_tilt=35,
                surface_azimuth=0,
                outputformat='csv'
            )
            
            # Renommer les colonnes pour plus de clart√©
            data.rename(columns={
                'P': 'Puissance_W',
                'G(i)': 'Irradiation_globale_plan_W_m2',
                'H_sun': 'Elevation_soleil_deg',
                'T2m': 'Temperature_air_C',
                'WS10m': 'Vitesse_vent_ms'
            }, inplace=True)

            all_data.append(data)
            print(f"  ‚úÖ Donn√©es {annee} t√©l√©charg√©es avec succ√®s")
            
        except Exception as e:
            print(f"  ‚ùå Erreur pour l'ann√©e {annee}: {e}")
    
    if all_data:
        # Combiner toutes les donn√©es
        combined_data = pd.concat(all_data, ignore_index=True)
        combined_data.sort_index(inplace=True)
        
        nom_fichier = f'donnees_production_pv_meaux_{annee_debut}_{annee_fin}.csv'
        combined_data.to_csv(nom_fichier)
        print(f"‚úÖ Toutes les donn√©es PVGIS enregistr√©es avec succ√®s dans '{nom_fichier}'")
        print(f"üìä Total: {len(combined_data)} points de donn√©es")
        return nom_fichier
    else:
        print("‚ùå Aucune donn√©e n'a pu √™tre t√©l√©charg√©e")
        return None

def telecharger_donnees_entsoe_5_ans(api_key, pays_code='FR'):
    """
    T√©l√©charge les prix spot Day-Ahead depuis l'API ENTSO-E pour les 5 derni√®res ann√©es.
    """
    print("T√©l√©chargement des donn√©es de prix spot depuis ENTSO-E pour les 5 derni√®res ann√©es...")
    if not api_key or api_key == "VOTRE_CLE_API_ENTSOE_ICI":
        print("Erreur : Cl√© API ENTSO-E non configur√©e.")
        print("Veuillez suivre les instructions ici pour obtenir une cl√© : https://transparencyplatform.zendesk.com/hc/en-us/articles/12845911031188-How-to-get-security-token")
        return None
        
    try:
        client = EntsoePandasClient(api_key=api_key)
        
        # D√©finir la p√©riode : les 5 derni√®res ann√©es
        end_date = datetime.now()
        start_date = end_date - timedelta(days=5*365)  # 5 ans approximatif
        
        print(f"üìÖ P√©riode de t√©l√©chargement: {start_date.strftime('%Y-%m-%d')} √† {end_date.strftime('%Y-%m-%d')}")
        
        # Conversion au format attendu par la biblioth√®que
        start_ts = pd.Timestamp(start_date.strftime('%Y%m%d'), tz='Europe/Brussels')
        end_ts = pd.Timestamp(end_date.strftime('%Y%m%d'), tz='Europe/Brussels')

        # Requ√™te pour les prix Day-Ahead
        print("üîÑ Requ√™te en cours vers l'API ENTSO-E...")
        prices = client.query_day_ahead_prices(pays_code, start=start_ts, end=end_ts)
        
        nom_fichier = f'donnees_prix_spot_{pays_code}_{start_date.year}_{end_date.year}.csv'
        prices.to_csv(nom_fichier, header=['Prix_EUR_MWh'])
        print(f"‚úÖ Donn√©es de prix spot enregistr√©es avec succ√®s dans '{nom_fichier}'")
        print(f"üìä Total: {len(prices)} points de donn√©es")
        return nom_fichier
    except Exception as e:
        print(f"‚ùå Une erreur est survenue lors du t√©l√©chargement des donn√©es ENTSO-E : {e}")
        return None

# Garder les anciennes fonctions pour compatibilit√©
def telecharger_donnees_pvgis(lat, lon, annee=2020):
    """
    T√©l√©charge les donn√©es de production PV horaire depuis PVGIS pour une ann√©e donn√©e.
    """
    return telecharger_donnees_pvgis_multi_annees(lat, lon, annee, annee)

def telecharger_donnees_entsoe(api_key, pays_code='FR'):
    """
    T√©l√©charge les prix spot Day-Ahead depuis l'API ENTSO-E pour les 365 derniers jours.
    """
    return telecharger_donnees_entsoe_5_ans(api_key, pays_code)

if __name__ == '__main__':
    # --- PARAMETRES ---
    # Coordonn√©es de Meaux (77)
    LATITUDE_MEAUX = 48.96
    LONGITUDE_MEAUX = 2.88
    
    # !! IMPORTANT !!
    # Remplacez la ligne ci-dessous par votre propre cl√© API obtenue sur le site d'ENTSO-E
    # Instructions d√©taill√©es pour obtenir le token : https://transparencyplatform.zendesk.com/hc/en-us/articles/12845911031188-How-to-get-security-token
    ENTSOE_API_KEY = os.getenv('ENTSOE_API_TOKEN', "9d9b8840-56e2-4993-9385-47cfe2b8183f")

    print("üöÄ T√âL√âCHARGEMENT DES DONN√âES - 5 DERNI√àRES ANN√âES")
    print("="*60)
    
    # 1. R√©cup√©ration des donn√©es solaires (2020-2024)
    print("\nüìä 1. DONN√âES SOLAIRES PVGIS")
    print("-" * 40)
    telecharger_donnees_pvgis_multi_annees(LATITUDE_MEAUX, LONGITUDE_MEAUX, 2020, 2024)
    
    print("\nüí∞ 2. DONN√âES PRIX SPOT ENTSO-E")
    print("-" * 40)
    
    # 2. R√©cup√©ration des donn√©es de march√© (5 ans)
    telecharger_donnees_entsoe_5_ans(ENTSOE_API_KEY, pays_code='FR')
    
    print("\nüéâ Script termin√© avec succ√®s!") 