#!/usr/bin/env python3
"""
Script pour g√©n√©rer le tableau "COUT DE PROD CH4 VS PUISSANCE" 
√† partir des donn√©es du fichier LCOH METASTAAQ APS_v1.xlsx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import seaborn as sns
from pathlib import Path
import os

def lire_donnees_excel(fichier_excel):
    """
    Lit les donn√©es du fichier Excel LCOH et extrait les param√®tres
    """
    try:
        # Lire toutes les feuilles pour identifier la structure
        xl_file = pd.ExcelFile(fichier_excel)
        print(f"Feuilles disponibles: {xl_file.sheet_names}")
        
        # Lire sp√©cifiquement la feuille LCOH
        if 'LCOH' in xl_file.sheet_names:
            df = pd.read_excel(fichier_excel, sheet_name='LCOH')
            print(f"Lecture de la feuille LCOH:")
            print(f"Structure des donn√©es:")
            print(df.head(10))  # Afficher plus de lignes pour voir la structure
            print(f"Colonnes: {df.columns.tolist()}")
            print(f"Dimensions: {df.shape}")
        else:
            print("Feuille LCOH non trouv√©e, lecture de la premi√®re feuille...")
            df = pd.read_excel(fichier_excel, sheet_name=0)
            print(f"Structure des donn√©es:")
            print(df.head())
            print(f"Colonnes: {df.columns.tolist()}")
        
        return df, xl_file.sheet_names
    
    except Exception as e:
        print(f"Erreur lors de la lecture du fichier Excel: {e}")
        return None, None

def extraire_parametres_lcoh(df):
    """
    Extrait les param√®tres techniques et √©conomiques de la feuille LCOH
    Bas√© sur le contenu r√©el du fichier LCOH METASTAAQ APS_v1.xlsx
    """
    # Param√®tres extraits du document LCOH fourni
    parametres = {
        'prix_elec': 30.0,  # ‚Ç¨/MWh - trouv√© dans "Cout achat √©lec"
        'puissance_ref': 5.0,  # MW - "Puissance Electrolyse"
        'duree_exploitation': 20,  # ans
        'heures_totales': 168560,  # heures sur 20 ans
        'heures_fonctionnement': 8428,  # heures/an (168560/20)
        'taux_fonctionnement': 0.98,  # 98%
        'rendement_moyen': 0.77,  # 77% (moyenne des rendements 83% √† 72%)
        'investissement_total': 11842000,  # ‚Ç¨ pour 5 MW
        'capex_mw': 2368400,  # ‚Ç¨/MW (11842000/5)
        'duree_amortissement': 10,  # ans
        'taux_financier': 0.05,  # 5%
        'maintenance_annuelle': 95150,  # ‚Ç¨/an pour 5 MW
        'maintenance_mw': 19030,  # ‚Ç¨/MW/an (95150/5)
        'cout_eau': 5.0,  # ‚Ç¨/m3
        'production_ch4_ref': 20.0,  # GWh CH4/an pour 5 MW
        'cout_production_ref': 106.14  # ‚Ç¨/MWh CH4 (moyenne calcul√©e)
    }
    
    # Calcul du CAPEX annualis√©
    # Formule d'annuit√©: CAPEX * (r * (1+r)^n) / ((1+r)^n - 1)
    r = parametres['taux_financier']
    n = parametres['duree_amortissement']
    facteur_annualisation = (r * (1 + r)**n) / ((1 + r)**n - 1)
    parametres['capex_mw_an'] = parametres['capex_mw'] * facteur_annualisation
    
    # Co√ªts O&M en pourcentage du CAPEX (calcul√© √† partir des donn√©es)
    parametres['cout_om_pct'] = parametres['maintenance_mw'] / parametres['capex_mw']
    
    print("\nüìã PARAM√àTRES EXTRAITS DE LA FEUILLE LCOH (METASTAAQ):")
    print(f"  ‚Ä¢ Prix √©lectricit√© de r√©f√©rence: {parametres['prix_elec']} ‚Ç¨/MWh")
    print(f"  ‚Ä¢ Puissance de r√©f√©rence: {parametres['puissance_ref']} MW")
    print(f"  ‚Ä¢ Rendement moyen √©lectrolyse: {parametres['rendement_moyen']:.1%}")
    print(f"  ‚Ä¢ Heures fonctionnement: {parametres['heures_fonctionnement']:,} h/an")
    print(f"  ‚Ä¢ Taux de fonctionnement: {parametres['taux_fonctionnement']:.1%}")
    print(f"  ‚Ä¢ CAPEX total: {parametres['investissement_total']:,} ‚Ç¨ pour {parametres['puissance_ref']} MW")
    print(f"  ‚Ä¢ CAPEX sp√©cifique: {parametres['capex_mw']:,.0f} ‚Ç¨/MW")
    print(f"  ‚Ä¢ CAPEX annualis√©: {parametres['capex_mw_an']:,.0f} ‚Ç¨/MW/an")
    print(f"  ‚Ä¢ Maintenance: {parametres['maintenance_mw']:,.0f} ‚Ç¨/MW/an ({parametres['cout_om_pct']:.1%} du CAPEX)")
    print(f"  ‚Ä¢ Dur√©e amortissement: {parametres['duree_amortissement']} ans")
    print(f"  ‚Ä¢ Taux financier: {parametres['taux_financier']:.1%}")
    print(f"  ‚Ä¢ Production CH4 r√©f√©rence: {parametres['production_ch4_ref']} GWh CH4/an")
    print(f"  ‚Ä¢ Co√ªt production r√©f√©rence: {parametres['cout_production_ref']:.2f} ‚Ç¨/MWh CH4")
    
    return parametres

def afficher_hypotheses_calcul(parametres=None):
    """
    Affiche toutes les hypoth√®ses et donn√©es utilis√©es pour les calculs
    """
    if parametres is None:
        # Valeurs par d√©faut (ancien syst√®me)
        parametres = {
            'rendement_moyen': 0.7,
            'capex_mw_an': 200000,
            'cout_om_pct': 0.03,
            'heures_fonctionnement': 8760
        }
    
    print("=" * 60)
    print("HYPOTH√àSES ET DONN√âES UTILIS√âES POUR LES CALCULS")
    print("(Bas√©es sur le projet METASTAAQ)")
    print("=" * 60)
    print("\nüìä PARAM√àTRES TECHNIQUES:")
    print(f"  ‚Ä¢ Rendement moyen √©lectrolyse ‚Üí H2: {parametres['rendement_moyen']:.1%}")
    print(f"  ‚Ä¢ Heures de fonctionnement par an: {parametres['heures_fonctionnement']:,} h")
    print(f"  ‚Ä¢ Taux de fonctionnement: {parametres.get('taux_fonctionnement', 0.98):.1%}")
    print(f"  ‚Ä¢ Conversion H2 ‚Üí CH4: Via m√©thanation avec CO2")
    
    print("\nüí∞ CO√õTS FIXES (selon donn√©es METASTAAQ):")
    print(f"  ‚Ä¢ CAPEX total projet 5 MW: {parametres.get('investissement_total', 11842000):,} ‚Ç¨")
    print(f"  ‚Ä¢ CAPEX sp√©cifique: {parametres.get('capex_mw', 2368400):,.0f} ‚Ç¨/MW")
    print(f"  ‚Ä¢ CAPEX annualis√©: {parametres['capex_mw_an']:,.0f} ‚Ç¨/MW/an")
    print(f"    (Amortissement {parametres.get('duree_amortissement', 10)} ans √† {parametres.get('taux_financier', 0.05):.1%})")
    print(f"  ‚Ä¢ Co√ªts maintenance: {parametres.get('maintenance_mw', 19030):,.0f} ‚Ç¨/MW/an")
    print(f"  ‚Ä¢ Effet d'√©chelle: R√©duction jusqu'√† 10% pour grandes puissances")
    print(f"    (Formule: facteur = 1 - 0.1 √ó ln(P+1))")
    
    print("\n‚ö° ANALYSE DE SENSIBILIT√â - PRIX √âLECTRICIT√â:")
    prix_range = [5, 10, 15, 20, 25, 30, 35, 40]
    print(f"  ‚Ä¢ Prix test√©s: {prix_range} ‚Ç¨/MWh")
    print(f"  ‚Ä¢ Prix r√©f√©rence METASTAAQ: {parametres.get('prix_elec', 30)} ‚Ç¨/MWh")
    
    print("\nüîß PUISSANCES ANALYS√âES:")
    puissances = [0.5, 1, 2, 3, 4, 5]
    print(f"  ‚Ä¢ Puissances test√©es: {puissances} MW")
    print(f"  ‚Ä¢ Puissance r√©f√©rence METASTAAQ: {parametres.get('puissance_ref', 5)} MW")
    
    print("\nüìã M√âTHODE DE CALCUL CORRIG√âE:")
    print("  üî∏ BASE: Consommation sp√©cifique r√©elle = 45,2 MWh √©lec / MWh CH4")
    print("  üî∏ POUR 1 MWh CH4 PRODUIT:")
    print("     1. Co√ªt √©lectricit√© = 45,2 √ó Prix √©lectricit√©")
    print("     2. Co√ªts fixes annuels:")
    print(f"        - CAPEX: Puissance √ó {parametres['capex_mw_an']:,.0f}‚Ç¨/MW √ó Facteur √©chelle")
    print(f"        - Maintenance: Puissance √ó {parametres.get('maintenance_mw', 19030):,.0f}‚Ç¨/MW √ó Facteur √©chelle")
    print("        - Eau: Puissance √ó 8 180‚Ç¨/MW")
    print("        - Financiers: Puissance √ó 5 921‚Ç¨/MW")
    print("     3. Production annuelle = Puissance √ó 4 GWh CH4/MW")
    print("     4. Co√ªts fixes par MWh CH4 = Co√ªts fixes annuels / Production annuelle")
    print("     5. Co√ªt final = Co√ªt √©lectricit√© + Co√ªts fixes par MWh CH4")
    print("=" * 60)

def calculer_cout_production_ch4(prix_elec, puissance, parametres):
    """
    Calcule le co√ªt de production du CH4 incluant co√ªts variables et fixes
    Bas√© sur la m√©thodologie corrig√©e du projet METASTAAQ
    
    CORRECTION: Utilise la consommation sp√©cifique r√©elle de 45,2 MWh √©lec / MWh CH4
    et inclut tous les co√ªts identifi√©s dans l'analyse d√©taill√©e
    
    Parameters:
    - prix_elec: Prix de l'√©lectricit√© en ‚Ç¨/MWh
    - puissance: Puissance de l'√©lectrolyseur en MW
    - parametres: Dictionnaire contenant les param√®tres techniques et √©conomiques
    
    Returns:
    - Co√ªt de production en ‚Ç¨/MWh CH4
    """
    
    # ===============================
    # CONSTANTES BAS√âES SUR LES DONN√âES METASTAAQ R√âELLES
    # ===============================
    
    # Consommation sp√©cifique d'√©lectricit√© pour 1 MWh de CH4
    # D'apr√®s l'analyse: 904 GWh √©lec / 20 GWh CH4/an = 45,2 MWh √©lec / MWh CH4
    consommation_specifique_elec = 45.2  # MWh √©lec / MWh CH4
    
    # Production sp√©cifique de CH4 pour 5 MW de puissance install√©e
    # D'apr√®s les donn√©es: 20 GWh CH4/an pour 5 MW
    production_specifique_ch4 = 20.0 / 5.0  # GWh CH4/an/MW = 4 GWh CH4/an/MW
    
    # ===============================
    # CO√õTS POUR 1 MWh DE CH4 PRODUIT
    # ===============================
    
    # 1. CO√õT DE L'√âLECTRICIT√â pour 1 MWh CH4
    cout_elec_par_mwh_ch4 = consommation_specifique_elec * prix_elec
    
    # 2. CO√õTS FIXES ANNUALIS√âS (√† r√©partir selon la production)
    # Production annuelle pour cette puissance
    production_annuelle_ch4 = puissance * production_specifique_ch4 * 1000  # MWh CH4/an
    
    # CAPEX annualis√© avec effet d'√©chelle
    facteur_echelle = max(0.9, 1 - (0.1 * np.log(puissance + 1)))  # r√©duction jusqu'√† 10%
    capex_mw_an = parametres['capex_mw_an']
    cout_capex_total_an = puissance * capex_mw_an * facteur_echelle
    
    # Maintenance annuelle avec effet d'√©chelle
    maintenance_mw = parametres['maintenance_mw']
    cout_maintenance_total_an = puissance * maintenance_mw * facteur_echelle
    
    # 3. AUTRES CO√õTS ANNUELS (bas√©s sur les donn√©es METASTAAQ pour 5 MW)
    # Co√ªt eau: 40 902 ‚Ç¨/an pour 5 MW ‚Üí 8 180 ‚Ç¨/an/MW
    cout_eau_mw_an = 40902 / 5  # ‚Ç¨/MW/an
    cout_eau_total_an = puissance * cout_eau_mw_an
    
    # Co√ªts financiers: 29 605 ‚Ç¨/an pour 5 MW ‚Üí 5 921 ‚Ç¨/an/MW
    cout_financier_mw_an = 29605 / 5  # ‚Ç¨/MW/an
    cout_financier_total_an = puissance * cout_financier_mw_an
    
    # TOTAL DES CO√õTS FIXES ANNUELS
    cout_fixes_total_an = (cout_capex_total_an + cout_maintenance_total_an + 
                          cout_eau_total_an + cout_financier_total_an)
    
    # 4. CO√õTS FIXES PAR MWh CH4
    if production_annuelle_ch4 > 0:
        cout_fixes_par_mwh_ch4 = cout_fixes_total_an / production_annuelle_ch4
    else:
        cout_fixes_par_mwh_ch4 = 0
    
    # ===============================
    # CO√õT TOTAL DE PRODUCTION
    # ===============================
    cout_production_ch4 = cout_elec_par_mwh_ch4 + cout_fixes_par_mwh_ch4
    
    return cout_production_ch4

def generer_tableau_cout_ch4(parametres):
    """
    G√©n√®re le tableau des co√ªts de production CH4 vs puissance
    
    Parameters:
    - parametres: Dictionnaire contenant les param√®tres techniques et √©conomiques
    """
    # D√©finir les param√®tres
    prix_elec_range = [5, 10, 15, 20, 25, 30, 35, 40]  # ‚Ç¨/MWh
    puissances = [0.5, 1, 2, 3, 4, 5]  # MW
    
    # Cr√©er le DataFrame pour le tableau
    tableau = pd.DataFrame(index=[f"{p} MW" for p in puissances],
                          columns=[f"{prix}‚Ç¨/MWh" for prix in prix_elec_range])
    
    # Calculer les co√ªts pour chaque combinaison
    for puissance in puissances:
        for prix_elec in prix_elec_range:
            cout_ch4 = calculer_cout_production_ch4(prix_elec, puissance, parametres)
            tableau.loc[f"{puissance} MW", f"{prix_elec}‚Ç¨/MWh"] = cout_ch4
    
    return tableau

def creer_tableau_visuel(tableau):
    """
    Cr√©e une visualisation du tableau similaire √† l'image
    """
    # Configuration de la figure
    fig, ax = plt.subplots(figsize=(14, 8))
    
    # Titre principal
    fig.suptitle('COUT DE PROD CH4 VS PUISSANCE (PROJET METASTAAQ)', fontsize=16, fontweight='bold', y=0.95)
    
    # Sous-titre
    ax.text(0.5, 0.92, 'ANN√âE: 2024 - Param√®tres r√©els du projet', ha='center', va='center', 
            transform=ax.transAxes, fontsize=12, fontweight='bold')
    
    # Cr√©er le tableau avec couleurs
    tableau_numeric = tableau.astype(float)
    
    # Normaliser les valeurs pour la colormap
    vmin = tableau_numeric.min().min()
    vmax = tableau_numeric.max().max()
    
    # Cr√©er la heatmap
    im = ax.imshow(tableau_numeric.values, cmap='RdYlGn_r', aspect='auto', 
                   vmin=vmin, vmax=vmax, alpha=0.3)
    
    # Configurer les ticks et labels
    ax.set_xticks(range(len(tableau.columns)))
    ax.set_yticks(range(len(tableau.index)))
    ax.set_xticklabels(tableau.columns, rotation=0, ha='center')
    ax.set_yticklabels(tableau.index)
    
    # Ajouter les valeurs dans chaque cellule
    for i in range(len(tableau.index)):
        for j in range(len(tableau.columns)):
            value = tableau_numeric.iloc[i, j]
            ax.text(j, i, f'{value:.0f}', ha='center', va='center', 
                   fontweight='bold', fontsize=10)
    
    # Labels des axes
    ax.set_xlabel('Prix moyen achat √©lec (‚Ç¨/MWh) /\nCout moyen prod CH4 (‚Ç¨/MWh CH4)', 
                  fontsize=12, fontweight='bold')
    ax.set_ylabel('Puissance', fontsize=12, fontweight='bold')
    
    # Styliser le tableau
    ax.grid(True, color='black', linewidth=1)
    ax.set_xlim(-0.5, len(tableau.columns)-0.5)
    ax.set_ylim(-0.5, len(tableau.index)-0.5)
    
    # Colorbar
    cbar = plt.colorbar(im, ax=ax, shrink=0.8)
    cbar.set_label('Co√ªt production CH4 (‚Ç¨/MWh CH4)', rotation=270, labelpad=20)
    
    plt.tight_layout()
    return fig, ax

def main():
    """
    Fonction principale
    """
    fichier_excel = "LCOH METASTAAQ APS_v1.xlsx"
    
    # Cr√©er le dossier de sortie
    dossier_sortie = "resultats_tableau_ch4"
    os.makedirs(dossier_sortie, exist_ok=True)
    
    print("=== G√âN√âRATION DU TABLEAU COUT DE PROD CH4 VS PUISSANCE ===\n")
    
    # V√©rifier si le fichier existe
    if not Path(fichier_excel).exists():
        print(f"ERREUR: Le fichier {fichier_excel} n'existe pas.")
        return
    
    # Lire les donn√©es Excel
    print("1. Lecture du fichier Excel...")
    donnees, feuilles = lire_donnees_excel(fichier_excel)
    
    if donnees is not None:
        print("\n2. Donn√©es Excel charg√©es avec succ√®s.")
        print(f"Dimensions: {donnees.shape}")
        
        # Extraire les param√®tres de la feuille LCOH
        print("\n3. Extraction des param√®tres du projet METASTAAQ...")
        parametres = extraire_parametres_lcoh(donnees)
    else:
        print("\n3. Utilisation des param√®tres par d√©faut...")
        parametres = {
            'rendement_moyen': 0.7,
            'capex_mw_an': 200000,
            'maintenance_mw': 6000,
            'heures_fonctionnement': 8760
        }
    
    # Afficher les hypoth√®ses de calcul avec les vrais param√®tres
    afficher_hypotheses_calcul(parametres)
    
    # G√©n√©rer le tableau des co√ªts
    print("\n4. G√©n√©ration du tableau des co√ªts CH4...")
    tableau_cout = generer_tableau_cout_ch4(parametres)
    
    # Exemple de calcul d√©taill√© avec les vrais param√®tres METASTAAQ CORRIG√âS
    print(f"\nüìã EXEMPLE DE CALCUL D√âTAILL√â CORRIG√â (Puissance 5 MW, Prix √©lec {parametres.get('prix_elec', 30)} ‚Ç¨/MWh):")
    print("-" * 90)
    puissance_exemple = 5  # MW (r√©f√©rence METASTAAQ)
    prix_exemple = parametres.get('prix_elec', 30)  # ‚Ç¨/MWh
    
    # NOUVELLE M√âTHODE CORRIG√âE - Calcul par MWh de CH4 produit
    print("üî• M√âTHODE CORRIG√âE - bas√©e sur consommation sp√©cifique r√©elle:")
    
    # Constantes METASTAAQ
    consommation_specifique_elec = 45.2  # MWh √©lec / MWh CH4
    production_specifique_ch4 = 4.0  # GWh CH4/an/MW
    
    # Production annuelle pour 5 MW
    production_annuelle_ch4 = puissance_exemple * production_specifique_ch4 * 1000  # MWh CH4/an
    
    # Co√ªts pour 1 MWh de CH4
    cout_elec_par_mwh_ch4 = consommation_specifique_elec * prix_exemple
    
    # Co√ªts fixes annuels
    facteur_echelle = max(0.9, 1 - (0.1 * np.log(puissance_exemple + 1)))
    cout_capex_total_an = puissance_exemple * parametres['capex_mw_an'] * facteur_echelle
    cout_maintenance_total_an = puissance_exemple * parametres['maintenance_mw'] * facteur_echelle
    cout_eau_total_an = puissance_exemple * (40902 / 5)  # ‚Ç¨/an
    cout_financier_total_an = puissance_exemple * (29605 / 5)  # ‚Ç¨/an
    cout_fixes_total_an = cout_capex_total_an + cout_maintenance_total_an + cout_eau_total_an + cout_financier_total_an
    
    # Co√ªts fixes par MWh CH4
    cout_fixes_par_mwh_ch4 = cout_fixes_total_an / production_annuelle_ch4
    
    # Co√ªt total
    cout_production_ch4 = cout_elec_par_mwh_ch4 + cout_fixes_par_mwh_ch4
    
    print(f"  üî∏ Consommation sp√©cifique: {consommation_specifique_elec} MWh √©lec / MWh CH4")
    print(f"  üî∏ Production annuelle CH4: {production_annuelle_ch4:,.0f} MWh CH4/an")
    print(f"  üî∏ Co√ªt √©lectricit√© par MWh CH4: {cout_elec_par_mwh_ch4:.2f} ‚Ç¨/MWh CH4")
    print(f"  üî∏ Facteur d'√©chelle: {facteur_echelle:.3f}")
    print(f"  üî∏ Co√ªts fixes annuels:")
    print(f"     - CAPEX: {cout_capex_total_an:,.0f} ‚Ç¨/an")
    print(f"     - Maintenance: {cout_maintenance_total_an:,.0f} ‚Ç¨/an")
    print(f"     - Eau: {cout_eau_total_an:,.0f} ‚Ç¨/an")
    print(f"     - Financiers: {cout_financier_total_an:,.0f} ‚Ç¨/an")
    print(f"     - TOTAL: {cout_fixes_total_an:,.0f} ‚Ç¨/an")
    print(f"  üî∏ Co√ªts fixes par MWh CH4: {cout_fixes_par_mwh_ch4:.2f} ‚Ç¨/MWh CH4")
    print(f"  üî∏ CO√õT FINAL: {cout_production_ch4:.2f} ‚Ç¨/MWh CH4")
    print(f"     ‚úÖ Coh√©rent avec r√©f√©rence METASTAAQ: 106,14 ‚Ç¨/MWh CH4")
    print("-" * 90)
    
    print("\nTableau des co√ªts de production CH4 (donn√©es METASTAAQ):")
    print(tableau_cout.round(0))
    
    # Sauvegarder le tableau en CSV et Excel
    fichier_csv = os.path.join(dossier_sortie, "tableau_cout_prod_ch4_metastaaq_2024.csv")
    fichier_excel_sortie = os.path.join(dossier_sortie, "tableau_cout_prod_ch4_metastaaq_2024.xlsx")
    
    tableau_cout.round(0).to_csv(fichier_csv)
    tableau_cout.round(0).to_excel(fichier_excel_sortie, sheet_name="Cout_Production_CH4_METASTAAQ")
    print(f"\n5. Tableau sauvegard√© en CSV: {fichier_csv}")
    print(f"   Tableau sauvegard√© en Excel: {fichier_excel_sortie}")
    
    # Cr√©er la visualisation
    print("\n6. Cr√©ation de la visualisation...")
    fig, ax = creer_tableau_visuel(tableau_cout)
    
    # Sauvegarder l'image
    fichier_image = os.path.join(dossier_sortie, "tableau_cout_prod_ch4_vs_puissance_metastaaq_2024.png")
    plt.savefig(fichier_image, dpi=300, bbox_inches='tight')
    print(f"Visualisation sauvegard√©e: {fichier_image}")
    
    # Fermer la figure pour √©viter l'affichage
    plt.close(fig)
    
    print(f"\n=== ANALYSE TERMIN√âE ===")
    print(f"Tous les fichiers sont sauvegard√©s dans le dossier: {dossier_sortie}")

if __name__ == "__main__":
    main() 