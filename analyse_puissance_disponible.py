import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Configuration des graphiques
plt.style.use('seaborn-v0_8')
plt.rcParams['figure.figsize'] = (15, 10)
plt.rcParams['font.size'] = 12
sns.set_palette("husl")

def charger_donnees_prix():
    """Charge et pr√©pare les donn√©es de prix spot 2020-2025"""
    print("üìä Chargement des donn√©es de prix spot 2020-2025...")
    
    # Charger les donn√©es
    df = pd.read_csv('donnees_prix_spot_FR_2020_2025.csv', index_col=0)
    
    # Renommer la colonne si n√©cessaire
    if 'Prix_EUR_MWh' not in df.columns and len(df.columns) == 1:
        df.columns = ['Prix_EUR_MWh']
    
    # Convertir l'index en DatetimeIndex
    df.index = pd.to_datetime(df.index, utc=True).tz_convert('Europe/Paris').tz_localize(None)
    
    # Ajouter des colonnes temporelles
    df['Annee'] = df.index.year
    df['Mois'] = df.index.month
    df['Mois_nom'] = df.index.month_name()
    df['Heure'] = df.index.hour
    df['Date'] = df.index.date
    
    print(f"‚úÖ Donn√©es charg√©es: {len(df)} points de donn√©es")
    print(f"üìÖ P√©riode: {df.index.min()} √† {df.index.max()}")
    print(f"üóìÔ∏è Ann√©es disponibles: {sorted(df['Annee'].unique())}")
    print(f"üí∞ Prix moyen global: {df['Prix_EUR_MWh'].mean():.2f} ‚Ç¨/MWh")
    
    return df

def calculer_heures_disponibles_par_seuil(df_annee, puissances, seuils_prix):
    """
    Calcule le nombre d'heures disponibles pour chaque combinaison puissance/seuil de prix
    
    Principe: Pour une puissance donn√©e, on peut fonctionner si le prix est inf√©rieur au seuil
    Plus la puissance est √©lev√©e, plus on consomme, donc plus on est sensible au prix
    """
    resultats = {}
    
    for puissance in puissances:
        resultats[f'{puissance} MW'] = {}
        
        for seuil in seuils_prix:
            # Calcul du nombre d'heures o√π le prix est inf√©rieur ou √©gal au seuil
            heures_disponibles = len(df_annee[df_annee['Prix_EUR_MWh'] <= seuil])
            resultats[f'{puissance} MW'][f'{seuil} ‚Ç¨/MWh'] = heures_disponibles
    
    return pd.DataFrame(resultats)

def analyser_puissance_par_annee(df):
    """Analyse la puissance disponible par ann√©e"""
    print("\nüîç Analyse 1: Heures disponibles par co√ªt moyen d'achat (par ann√©e)")
    print("="*70)
    
    # D√©finir les puissances et seuils de prix
    puissances = [0.5, 1, 2, 3, 5]
    seuils_prix = list(range(5, 45, 5))  # 5, 10, 15, ..., 40
    
    # Dictionnaire pour stocker les r√©sultats
    resultats_annees = {}
    
    # Analyser chaque ann√©e
    for annee in sorted(df['Annee'].unique()):
        if annee >= 2020:  # S'assurer qu'on a des donn√©es compl√®tes
            print(f"\nüìÖ Analyse pour l'ann√©e {annee}:")
            
            # Filtrer les donn√©es pour cette ann√©e
            df_annee = df[df['Annee'] == annee].copy()
            
            # Calculer les heures disponibles
            tableau_annee = calculer_heures_disponibles_par_seuil(df_annee, puissances, seuils_prix)
            
            # Stocker les r√©sultats
            resultats_annees[annee] = tableau_annee
            
            # Afficher le tableau
            print(f"üìä Heures disponibles pour {annee}:")
            print(tableau_annee)
            
            # Statistiques suppl√©mentaires
            print(f"\nüìà Statistiques {annee}:")
            print(f"   ‚Ä¢ Total d'heures dans l'ann√©e: {len(df_annee)}")
            print(f"   ‚Ä¢ Prix moyen: {df_annee['Prix_EUR_MWh'].mean():.2f} ‚Ç¨/MWh")
            print(f"   ‚Ä¢ Prix m√©dian: {df_annee['Prix_EUR_MWh'].median():.2f} ‚Ç¨/MWh")
            print(f"   ‚Ä¢ Prix minimum: {df_annee['Prix_EUR_MWh'].min():.2f} ‚Ç¨/MWh")
            print(f"   ‚Ä¢ Prix maximum: {df_annee['Prix_EUR_MWh'].max():.2f} ‚Ç¨/MWh")
    
    return resultats_annees

def creer_graphiques_heures_disponibles(resultats_annees):
    """Cr√©e les graphiques des heures disponibles par ann√©e"""
    print("\nüìà Cr√©ation des graphiques par ann√©e...")
    
    # Cr√©er un graphique pour chaque ann√©e
    for annee, tableau in resultats_annees.items():
        fig, axes = plt.subplots(2, 2, figsize=(20, 15))
        fig.suptitle(f'Analyse des Heures Disponibles - Ann√©e {annee}', fontsize=16, fontweight='bold')
        
        # Pr√©parer les donn√©es pour le graphique
        # Les colonnes sont les puissances (0.5 MW, 1 MW, etc.)
        # Les index sont les seuils de prix (5 ‚Ç¨/MWh, 10 ‚Ç¨/MWh, etc.)
        seuils = [idx.replace(' ‚Ç¨/MWh', '') for idx in tableau.index]
        seuils_num = [int(s) for s in seuils]
        
        # Graphique 1: Courbes par puissance
        ax1 = axes[0, 0]
        for puissance in tableau.columns:
            valeurs = tableau[puissance].values
            ax1.plot(seuils_num, valeurs, marker='o', linewidth=2, label=puissance)
        
        ax1.set_xlabel('Seuil de prix (‚Ç¨/MWh)')
        ax1.set_ylabel('Heures disponibles')
        ax1.set_title(f'Heures disponibles par seuil de prix - {annee}')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # Graphique 2: Heatmap
        ax2 = axes[0, 1]
        im = ax2.imshow(tableau.T.values, cmap='RdYlGn', aspect='auto')
        ax2.set_xticks(range(len(seuils)))
        ax2.set_xticklabels(seuils)
        ax2.set_yticks(range(len(tableau.columns)))
        ax2.set_yticklabels(tableau.columns)
        ax2.set_xlabel('Seuil de prix (‚Ç¨/MWh)')
        ax2.set_ylabel('Puissance (MW)')
        ax2.set_title(f'Heatmap des heures disponibles - {annee}')
        plt.colorbar(im, ax=ax2, label='Heures disponibles')
        
        # Graphique 3: Barres group√©es pour quelques seuils cl√©s
        ax3 = axes[1, 0]
        seuils_cles = ['15 ‚Ç¨/MWh', '20 ‚Ç¨/MWh', '25 ‚Ç¨/MWh', '30 ‚Ç¨/MWh']
        x = np.arange(len(tableau.columns))
        width = 0.2
        
        for i, seuil in enumerate(seuils_cles):
            if seuil in tableau.index:
                valeurs = tableau.loc[seuil].values
                ax3.bar(x + i*width, valeurs, width, label=seuil)
        
        ax3.set_xlabel('Puissance (MW)')
        ax3.set_ylabel('Heures disponibles')
        ax3.set_title(f'Comparaison par seuils de prix - {annee}')
        ax3.set_xticks(x + width * 1.5)
        ax3.set_xticklabels(tableau.columns)
        ax3.legend()
        ax3.grid(True, alpha=0.3)
        
        # Graphique 4: Pourcentage d'heures disponibles
        ax4 = axes[1, 1]
        total_heures = 8760 if annee % 4 != 0 else 8784  # Ann√©e bissextile
        
        # Calculer les pourcentages pour le seuil de 15 ‚Ç¨/MWh
        if '15 ‚Ç¨/MWh' in tableau.index:
            pct_disponible = (tableau.loc['15 ‚Ç¨/MWh'] / total_heures * 100).values
            ax4.bar(tableau.columns, pct_disponible, alpha=0.7, color='skyblue')
            ax4.set_xlabel('Puissance (MW)')
            ax4.set_ylabel('% d\'heures disponibles')
            ax4.set_title(f'Pourcentage d\'heures disponibles √† 15 ‚Ç¨/MWh - {annee}')
            ax4.grid(True, alpha=0.3)
            
            # Ajouter les valeurs sur les barres
            for i, v in enumerate(pct_disponible):
                ax4.text(i, v + 1, f'{v:.1f}%', ha='center', va='bottom')
        
        plt.tight_layout()
        plt.savefig(f'analyse_heures_disponibles_{annee}.png', dpi=300, bbox_inches='tight')
        plt.show()

def analyser_saisonnalite(df):
    """Analyse la saisonnalit√© pour 2023 et 2024 √† 15 ‚Ç¨/MWh"""
    print("\nüåç Analyse 2: Saisonnalit√© de la puissance disponible (2023 & 2024)")
    print("="*70)
    
    puissances = [0.5, 1, 2, 3, 5]
    prix_cible = 15  # ‚Ç¨/MWh
    
    resultats_saisonnalite = {}
    
    for annee in [2023, 2024]:
        if annee in df['Annee'].unique():
            print(f"\nüìÖ Analyse saisonnalit√© pour {annee}:")
            
            # Filtrer les donn√©es pour cette ann√©e
            df_annee = df[df['Annee'] == annee].copy()
            
            # Calculer les heures disponibles par mois pour chaque puissance
            tableau_mois = {}
            
            for puissance in puissances:
                tableau_mois[f'{puissance} MW'] = {}
                
                for mois in range(1, 13):
                    df_mois = df_annee[df_annee['Mois'] == mois]
                    heures_disponibles = len(df_mois[df_mois['Prix_EUR_MWh'] <= prix_cible])
                    nom_mois = df_mois['Mois_nom'].iloc[0] if len(df_mois) > 0 else f'Mois_{mois}'
                    tableau_mois[f'{puissance} MW'][nom_mois] = heures_disponibles
            
            # Convertir en DataFrame
            tableau_saisonnalite = pd.DataFrame(tableau_mois)
            resultats_saisonnalite[annee] = tableau_saisonnalite
            
            print(f"üìä Heures disponibles par mois √† {prix_cible} ‚Ç¨/MWh pour {annee}:")
            print(tableau_saisonnalite)
            
            # Statistiques mensuelles
            print(f"\nüìà Statistiques mensuelles {annee}:")
            for mois in range(1, 13):
                df_mois = df_annee[df_annee['Mois'] == mois]
                if len(df_mois) > 0:
                    nom_mois = df_mois['Mois_nom'].iloc[0]
                    prix_moyen = df_mois['Prix_EUR_MWh'].mean()
                    heures_favorables = len(df_mois[df_mois['Prix_EUR_MWh'] <= prix_cible])
                    print(f"   ‚Ä¢ {nom_mois}: {prix_moyen:.2f} ‚Ç¨/MWh moyen, {heures_favorables} heures ‚â§ {prix_cible} ‚Ç¨/MWh")
    
    return resultats_saisonnalite

def creer_graphiques_saisonnalite(resultats_saisonnalite):
    """Cr√©e les graphiques de saisonnalit√©"""
    print("\nüìà Cr√©ation des graphiques de saisonnalit√©...")
    
    for annee, tableau in resultats_saisonnalite.items():
        fig, axes = plt.subplots(2, 2, figsize=(20, 15))
        fig.suptitle(f'Saisonnalit√© de la Puissance Disponible - Ann√©e {annee} (15 ‚Ç¨/MWh)', 
                    fontsize=16, fontweight='bold')
        
        # Pr√©parer les donn√©es
        mois = tableau.index
        mois_num = range(1, len(mois) + 1)
        
        # Graphique 1: Courbes par puissance
        ax1 = axes[0, 0]
        for puissance in tableau.columns:
            valeurs = tableau[puissance].values
            ax1.plot(mois_num, valeurs, marker='o', linewidth=2, label=puissance)
        
        ax1.set_xlabel('Mois')
        ax1.set_ylabel('Heures disponibles')
        ax1.set_title(f'√âvolution mensuelle par puissance - {annee}')
        ax1.set_xticks(mois_num)
        ax1.set_xticklabels([m[:3] for m in mois], rotation=45)
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # Graphique 2: Heatmap
        ax2 = axes[0, 1]
        im = ax2.imshow(tableau.T.values, cmap='RdYlGn', aspect='auto')
        ax2.set_xticks(range(len(mois)))
        ax2.set_xticklabels([m[:3] for m in mois], rotation=45)
        ax2.set_yticks(range(len(tableau.columns)))
        ax2.set_yticklabels(tableau.columns)
        ax2.set_xlabel('Mois')
        ax2.set_ylabel('Puissance (MW)')
        ax2.set_title(f'Heatmap saisonnalit√© - {annee}')
        plt.colorbar(im, ax=ax2, label='Heures disponibles')
        
        # Graphique 3: Barres group√©es pour quelques puissances
        ax3 = axes[1, 0]
        puissances_cles = ['1 MW', '2 MW', '3 MW', '5 MW']
        x = np.arange(len(mois))
        width = 0.2
        
        for i, puissance in enumerate(puissances_cles):
            if puissance in tableau.columns:
                valeurs = tableau[puissance].values
                ax3.bar(x + i*width, valeurs, width, label=puissance)
        
        ax3.set_xlabel('Mois')
        ax3.set_ylabel('Heures disponibles')
        ax3.set_title(f'Comparaison par puissance - {annee}')
        ax3.set_xticks(x + width * 1.5)
        ax3.set_xticklabels([m[:3] for m in mois], rotation=45)
        ax3.legend()
        ax3.grid(True, alpha=0.3)
        
        # Graphique 4: Moyenne mobile
        ax4 = axes[1, 1]
        # Calculer la moyenne des heures disponibles toutes puissances confondues
        moyenne_mensuelle = tableau.mean(axis=1)
        ax4.plot(mois_num, moyenne_mensuelle, marker='o', linewidth=3, color='red', label='Moyenne')
        ax4.fill_between(mois_num, moyenne_mensuelle, alpha=0.3, color='red')
        
        ax4.set_xlabel('Mois')
        ax4.set_ylabel('Heures disponibles moyennes')
        ax4.set_title(f'Moyenne mensuelle toutes puissances - {annee}')
        ax4.set_xticks(mois_num)
        ax4.set_xticklabels([m[:3] for m in mois], rotation=45)
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        # Ajouter les valeurs sur la courbe
        for i, v in enumerate(moyenne_mensuelle):
            ax4.text(i+1, v + 5, f'{v:.0f}', ha='center', va='bottom')
        
        plt.tight_layout()
        plt.savefig(f'analyse_saisonnalite_{annee}.png', dpi=300, bbox_inches='tight')
        plt.show()

def sauvegarder_resultats_excel(resultats_annees, resultats_saisonnalite):
    """Sauvegarde tous les r√©sultats dans des fichiers Excel"""
    print("\nüíæ Sauvegarde des r√©sultats en Excel...")
    
    # 1. Sauvegarder les analyses par ann√©e
    with pd.ExcelWriter('analyse_heures_disponibles_par_annee.xlsx') as writer:
        for annee, tableau in resultats_annees.items():
            tableau.to_excel(writer, sheet_name=f'Annee_{annee}')
        
        # Ajouter une feuille de synth√®se
        synthese = pd.DataFrame()
        for annee, tableau in resultats_annees.items():
            # Extraire les donn√©es pour 15 ‚Ç¨/MWh
            if '15 ‚Ç¨/MWh' in tableau.index:
                synthese[f'{annee}'] = tableau.loc['15 ‚Ç¨/MWh']
        
        synthese.to_excel(writer, sheet_name='Synthese_15_EUR_MWh')
    
    # 2. Sauvegarder les analyses de saisonnalit√©
    with pd.ExcelWriter('analyse_saisonnalite_2023_2024.xlsx') as writer:
        for annee, tableau in resultats_saisonnalite.items():
            tableau.to_excel(writer, sheet_name=f'Saisonnalite_{annee}')
        
        # Comparaison 2023 vs 2024
        if 2023 in resultats_saisonnalite and 2024 in resultats_saisonnalite:
            comparaison = pd.DataFrame()
            for puissance in resultats_saisonnalite[2023].columns:
                comparaison[f'{puissance}_2023'] = resultats_saisonnalite[2023][puissance]
                if puissance in resultats_saisonnalite[2024].columns:
                    comparaison[f'{puissance}_2024'] = resultats_saisonnalite[2024][puissance]
            
            comparaison.to_excel(writer, sheet_name='Comparaison_2023_vs_2024')
    
    print("‚úÖ Fichiers Excel cr√©√©s:")
    print("   ‚Ä¢ analyse_heures_disponibles_par_annee.xlsx")
    print("   ‚Ä¢ analyse_saisonnalite_2023_2024.xlsx")

def generer_rapport_synthese(df, resultats_annees, resultats_saisonnalite):
    """G√©n√®re un rapport de synth√®se"""
    print("\nüìã RAPPORT DE SYNTH√àSE - ANALYSE PUISSANCE DISPONIBLE")
    print("="*70)
    
    # Synth√®se globale
    print(f"\nüîç DONN√âES ANALYS√âES:")
    print(f"   ‚Ä¢ P√©riode: {df.index.min().strftime('%Y-%m-%d')} √† {df.index.max().strftime('%Y-%m-%d')}")
    print(f"   ‚Ä¢ Total d'heures: {len(df):,}")
    print(f"   ‚Ä¢ Ann√©es compl√®tes: {len(resultats_annees)}")
    
    # Synth√®se par ann√©e pour 15 ‚Ç¨/MWh
    print(f"\n‚ö° HEURES DISPONIBLES √Ä 15 ‚Ç¨/MWh PAR ANN√âE:")
    for annee in sorted(resultats_annees.keys()):
        tableau = resultats_annees[annee]
        if '15 ‚Ç¨/MWh' in tableau.index:
            print(f"   ‚Ä¢ {annee}:")
            for puissance in tableau.columns:
                heures = tableau.loc['15 ‚Ç¨/MWh', puissance]
                total_heures = 8760 if annee % 4 != 0 else 8784
                pct = (heures / total_heures) * 100
                print(f"     - {puissance}: {heures:,} heures ({pct:.1f}%)")
    
    # Analyse de tendance
    print(f"\nüìà TENDANCES:")
    if len(resultats_annees) >= 2:
        annees = sorted(resultats_annees.keys())
        premiere_annee = annees[0]
        derniere_annee = annees[-1]
        
        for puissance in resultats_annees[premiere_annee].columns:
            if '15 ‚Ç¨/MWh' in resultats_annees[premiere_annee].index and '15 ‚Ç¨/MWh' in resultats_annees[derniere_annee].index:
                heures_debut = resultats_annees[premiere_annee].loc['15 ‚Ç¨/MWh', puissance]
                heures_fin = resultats_annees[derniere_annee].loc['15 ‚Ç¨/MWh', puissance]
                evolution = ((heures_fin - heures_debut) / heures_debut) * 100
                tendance = "‚ÜóÔ∏è" if evolution > 0 else "‚ÜòÔ∏è" if evolution < 0 else "‚û°Ô∏è"
                print(f"   ‚Ä¢ {puissance}: {evolution:+.1f}% ({premiere_annee} ‚Üí {derniere_annee}) {tendance}")
    
    # Synth√®se saisonnalit√©
    if resultats_saisonnalite:
        print(f"\nüåç SAISONNALIT√â (15 ‚Ç¨/MWh):")
        for annee in sorted(resultats_saisonnalite.keys()):
            tableau = resultats_saisonnalite[annee]
            print(f"   ‚Ä¢ {annee}:")
            
            # Meilleurs et pires mois
            moyenne_mensuelle = tableau.mean(axis=1)
            meilleur_mois = moyenne_mensuelle.idxmax()
            pire_mois = moyenne_mensuelle.idxmin()
            
            print(f"     - Meilleur mois: {meilleur_mois} ({moyenne_mensuelle[meilleur_mois]:.0f} h moy.)")
            print(f"     - Pire mois: {pire_mois} ({moyenne_mensuelle[pire_mois]:.0f} h moy.)")
            
            # Amplitude saisonni√®re
            amplitude = moyenne_mensuelle.max() - moyenne_mensuelle.min()
            print(f"     - Amplitude saisonni√®re: {amplitude:.0f} heures")

def main():
    """Fonction principale"""
    print("üöÄ ANALYSE PUISSANCE DISPONIBLE METASTAAQ 2020-2025")
    print("="*60)
    
    # Charger les donn√©es
    df = charger_donnees_prix()
    
    # Analyse 1: Heures disponibles par ann√©e et par seuil de prix
    resultats_annees = analyser_puissance_par_annee(df)
    
    # Cr√©er les graphiques par ann√©e
    creer_graphiques_heures_disponibles(resultats_annees)
    
    # Analyse 2: Saisonnalit√© pour 2023 et 2024
    resultats_saisonnalite = analyser_saisonnalite(df)
    
    # Cr√©er les graphiques de saisonnalit√©
    creer_graphiques_saisonnalite(resultats_saisonnalite)
    
    # Sauvegarder en Excel
    sauvegarder_resultats_excel(resultats_annees, resultats_saisonnalite)
    
    # G√©n√©rer le rapport de synth√®se
    generer_rapport_synthese(df, resultats_annees, resultats_saisonnalite)
    
    print("\n‚úÖ Analyse termin√©e!")
    print("\nüìÅ Fichiers g√©n√©r√©s:")
    print("   üìä Graphiques: analyse_heures_disponibles_XXXX.png")
    print("   üìä Graphiques: analyse_saisonnalite_XXXX.png")
    print("   üìã Excel: analyse_heures_disponibles_par_annee.xlsx")
    print("   üìã Excel: analyse_saisonnalite_2023_2024.xlsx")

if __name__ == "__main__":
    main() 