import os
import pandas as pd
from datetime import datetime, timedelta
from pvlib.iotools import get_pvgis_hourly
from entsoe import EntsoePandasClient
import numpy as np

def telecharger_donnees_pvgis_multi_annees(lat, lon, annee_debut=2020, annee_fin=2024):
    """
    T√©l√©charge les donn√©es de production PV horaire depuis PVGIS pour plusieurs ann√©es.
    """
    print(f"T√©l√©chargement des donn√©es PVGIS pour les ann√©es {annee_debut} √† {annee_fin}...")
    
    all_data = []
    
    for annee in range(annee_debut, annee_fin + 1):
        print(f"  ‚Üí T√©l√©chargement pour l'ann√©e {annee}...")
        try:
            # Appel √† l'API de PVGIS via la biblioth√®que pvlib
            data, metadata, inputs = get_pvgis_hourly(
                latitude=lat,
                longitude=lon,
                start=annee,
                end=annee,
                pvcalculation=True,
                peakpower=5000,  # 5000 kWc = 5 MWc
                loss=14,         # Pertes syst√®me en %
                mountingplace='free',
                surface_tilt=35,
                surface_azimuth=0,
                outputformat='csv'
            )
            
            # Renommer les colonnes pour plus de clart√©
            data.rename(columns={
                'P': 'Puissance_W',
                'G(i)': 'Irradiation_globale_plan_W_m2',
                'H_sun': 'Elevation_soleil_deg',
                'T2m': 'Temperature_air_C',
                'WS10m': 'Vitesse_vent_ms'
            }, inplace=True)

            all_data.append(data)
            print(f"  ‚úÖ Donn√©es {annee} t√©l√©charg√©es avec succ√®s")
            
        except Exception as e:
            print(f"  ‚ùå Erreur pour l'ann√©e {annee}: {e}")
    
    if all_data:
        # Combiner toutes les donn√©es
        combined_data = pd.concat(all_data, ignore_index=True)
        combined_data.sort_index(inplace=True)
        
        nom_fichier = f'donnees_production_pv_meaux_{annee_debut}_{annee_fin}.csv'
        combined_data.to_csv(nom_fichier)
        print(f"‚úÖ Toutes les donn√©es PVGIS enregistr√©es avec succ√®s dans '{nom_fichier}'")
        print(f"üìä Total: {len(combined_data)} points de donn√©es")
        return nom_fichier
    else:
        print("‚ùå Aucune donn√©e n'a pu √™tre t√©l√©charg√©e")
        return None

def telecharger_donnees_entsoe_5_ans(api_key, pays_code='FR'):
    """
    T√©l√©charge les prix spot Day-Ahead depuis l'API ENTSO-E pour les 5 derni√®res ann√©es.
    Ajoute √©galement les colonnes de puissances disponibles selon les seuils de prix.
    """
    print("T√©l√©chargement des donn√©es de prix spot depuis ENTSO-E pour les 5 derni√®res ann√©es...")
    if not api_key or api_key == "VOTRE_CLE_API_ENTSOE_ICI":
        print("Erreur : Cl√© API ENTSO-E non configur√©e.")
        print("Veuillez suivre les instructions ici pour obtenir une cl√© : https://transparencyplatform.zendesk.com/hc/en-us/articles/12845911031188-How-to-get-security-token")
        return None
        
    try:
        client = EntsoePandasClient(api_key=api_key)
        
        # D√©finir la p√©riode : les 5 derni√®res ann√©es
        end_date = datetime.now()
        start_date = end_date - timedelta(days=5*365)  # 5 ans approximatif
        
        print(f"üìÖ P√©riode de t√©l√©chargement: {start_date.strftime('%Y-%m-%d')} √† {end_date.strftime('%Y-%m-%d')}")
        
        # Conversion au format attendu par la biblioth√®que
        start_ts = pd.Timestamp(start_date.strftime('%Y%m%d'), tz='Europe/Paris')
        end_ts = pd.Timestamp(end_date.strftime('%Y%m%d'), tz='Europe/Paris')

        # Requ√™te pour les prix Day-Ahead
        print("üîÑ Requ√™te en cours vers l'API ENTSO-E...")
        prices = client.query_day_ahead_prices(pays_code, start=start_ts, end=end_ts)
        
        # Convertir en DataFrame avec le nom de colonne standard
        df = pd.DataFrame(prices, columns=['Prix_EUR_MWh'])
        
        # Ajouter les colonnes de puissances disponibles
        print("‚ö° Calcul des puissances disponibles par seuil de prix...")
        
        # D√©finir les seuils de puissance (MW) et les seuils de prix (‚Ç¨/MWh)
        puissances = [0.5, 1, 2, 3, 4, 5]
        seuils_prix = [5, 10, 15, 20, 25, 30, 35, 40]
        
        print(f"üìä Seuils de puissance: {puissances} MW")
        print(f"üí∞ Seuils de prix: {seuils_prix} ‚Ç¨/MWh")
        
        # Pour chaque combinaison puissance/seuil, ajouter une colonne bool√©enne
        # indiquant si l'√©lectrolyseur peut fonctionner √† cette puissance avec ce prix
        for puissance in puissances:
            for seuil in seuils_prix:
                col_name = f'Disponible_{puissance}MW_max_{seuil}EUR_MWh'
                # L'√©lectrolyseur peut fonctionner si le prix est inf√©rieur ou √©gal au seuil
                df[col_name] = (df['Prix_EUR_MWh'] <= seuil).astype(int)
        
        # Ajouter des colonnes de synth√®se pour les seuils de prix importants
        print("üìà Ajout de colonnes de synth√®se...")
        
        # Colonnes indiquant le niveau de puissance maximal disponible pour chaque seuil cl√©
        seuils_cles = [15, 20, 25, 30]  # Seuils les plus pertinents pour le projet
        
        for seuil in seuils_cles:
            col_name = f'Puissance_max_disponible_{seuil}EUR_MWh'
            # Calculer la puissance maximale disponible pour ce prix
            df[col_name] = 0  # Initialiser √† 0
            
            for puissance in puissances:
                # Si le prix permet ce niveau de puissance, mettre √† jour la puissance max
                condition = df['Prix_EUR_MWh'] <= seuil
                df.loc[condition, col_name] = puissance
        
        # Ajouter des colonnes de classification du prix
        print("üè∑Ô∏è Ajout de classifications de prix...")
        
        # Classification qualitative du prix
        def classifier_prix(prix):
            if prix < 0:
                return "N√©gatif"
            elif prix <= 10:
                return "Tr√®s bas"
            elif prix <= 20:
                return "Bas"
            elif prix <= 40:
                return "Mod√©r√©"
            elif prix <= 80:
                return "√âlev√©"
            else:
                return "Tr√®s √©lev√©"
        
        df['Classification_prix'] = df['Prix_EUR_MWh'].apply(classifier_prix)
        
        # Opportunit√© de fonctionnement (tr√®s favorable pour l'√©lectrolyseur)
        df['Opportunite_excellente'] = (df['Prix_EUR_MWh'] <= 5).astype(int)
        df['Opportunite_bonne'] = (df['Prix_EUR_MWh'] <= 15).astype(int)
        df['Opportunite_acceptable'] = (df['Prix_EUR_MWh'] <= 25).astype(int)
        
        # Sauvegarder le fichier enrichi
        nom_fichier = f'donnees_prix_spot_{pays_code}_{start_date.year}_{end_date.year}.csv'
        df.to_csv(nom_fichier)
        
        print(f"‚úÖ Donn√©es de prix spot enrichies enregistr√©es dans '{nom_fichier}'")
        print(f"üìä Total: {len(df)} points de donn√©es")
        print(f"üîå Colonnes ajout√©es: {len(df.columns) - 1} colonnes de puissance disponible")
        
        # Afficher des statistiques de synth√®se
        print(f"\nüìà STATISTIQUES DE PUISSANCES DISPONIBLES:")
        print("="*50)
        
        for seuil in seuils_cles:
            col_name = f'Puissance_max_disponible_{seuil}EUR_MWh'
            stats = df[col_name].value_counts().sort_index()
            print(f"\nüí∞ R√©partition des puissances disponibles √† ‚â§ {seuil} ‚Ç¨/MWh:")
            for puissance, count in stats.items():
                pct = (count / len(df)) * 100
                print(f"   ‚Ä¢ {puissance} MW: {count:,} heures ({pct:.1f}%)")
        
        print(f"\nüéØ OPPORTUNIT√âS DE FONCTIONNEMENT:")
        print("="*40)
        for opportunite in ['excellente', 'bonne', 'acceptable']:
            col_name = f'Opportunite_{opportunite}'
            count = df[col_name].sum()
            pct = (count / len(df)) * 100
            print(f"   ‚Ä¢ Opportunit√© {opportunite}: {count:,} heures ({pct:.1f}%)")
        
        return nom_fichier
        
    except Exception as e:
        print(f"‚ùå Une erreur est survenue lors du t√©l√©chargement des donn√©es ENTSO-E : {e}")
        return None



# Garder les anciennes fonctions pour compatibilit√©
def telecharger_donnees_pvgis(lat, lon, annee=2020):
    """
    T√©l√©charge les donn√©es de production PV horaire depuis PVGIS pour une ann√©e donn√©e.
    """
    return telecharger_donnees_pvgis_multi_annees(lat, lon, annee, annee)

def telecharger_donnees_entsoe(api_key, pays_code='FR'):
    """
    T√©l√©charge les prix spot Day-Ahead depuis l'API ENTSO-E pour les 365 derniers jours.
    """
    return telecharger_donnees_entsoe_5_ans(api_key, pays_code)

if __name__ == '__main__':
    # --- PARAMETRES ---
    # Coordonn√©es de Meaux (77)
    LATITUDE_MEAUX = 48.96
    LONGITUDE_MEAUX = 2.88
    
    # !! IMPORTANT !!
    # Remplacez la ligne ci-dessous par votre propre cl√© API obtenue sur le site d'ENTSO-E
    # Instructions d√©taill√©es pour obtenir le token : https://transparencyplatform.zendesk.com/hc/en-us/articles/12845911031188-How-to-get-security-token
    ENTSOE_API_KEY = os.getenv('ENTSOE_API_TOKEN', "9d9b8840-56e2-4993-9385-47cfe2b8183f")

    print("üöÄ T√âL√âCHARGEMENT DES DONN√âES - ANALYSE COMPL√àTE")
    print("="*60)
    
    # Choix du mode d'analyse
    print("\nüîß MODES DISPONIBLES:")
    print("1. Analyse standard (5 derni√®res ann√©es)")
    print("2. Analyse d√©taill√©e des prix spot (2021-2025)")
    print("3. Les deux analyses")
    
    mode = input("\nChoisissez le mode (1/2/3) [d√©faut: 2]: ").strip() or "2"
    
    if mode in ["1", "3"]:
        # 1. R√©cup√©ration des donn√©es solaires (2020-2024)
        print("\nüìä 1. DONN√âES SOLAIRES PVGIS")
        print("-" * 40)
        telecharger_donnees_pvgis_multi_annees(LATITUDE_MEAUX, LONGITUDE_MEAUX, 2020, 2024)
        
        print("\nüí∞ 2. DONN√âES PRIX SPOT ENTSO-E (Mode standard)")
        print("-" * 50)
        telecharger_donnees_entsoe_5_ans(ENTSOE_API_KEY, pays_code='FR')
    
    if mode in ["2", "3"]:
        print("\nüîç ANALYSE D√âTAILL√âE DES PRIX SPOT HISTORIQUES")
        print("-" * 55)
        
        # Param√®tres pour l'analyse d√©taill√©e
        print("üìã Param√®tres de l'analyse d√©taill√©e:")
        print("   ‚Ä¢ Ann√©es: 2021-2025 (jusqu'√† juillet)")
        print("   ‚Ä¢ Niveaux de puissance: 0.5, 1, 2, 3, 4, 5 MW")
        print("   ‚Ä¢ Analyse horaire avec cr√©neaux optimaux")
        
        confirmer = input("\nLancer l'analyse d√©taill√©e ? (O/n): ").strip().lower()
        if confirmer != 'n':
            resultat = telecharger_donnees_spot_historiques_detaillees(
                api_key=ENTSOE_API_KEY,
                annee_debut=2021,
                annee_fin=2025,
                mois_fin=7,  # Jusqu'√† juillet 2025
                pays_code='FR'
            )
            
            if resultat:
                print(f"\nüéØ ANALYSE TERMIN√âE!")
                print(f"üìÅ Fichier g√©n√©r√©: {resultat}")
                print("üìä Ce fichier contient:")
                print("   ‚Ä¢ Prix spot horaires d√©taill√©s")
                print("   ‚Ä¢ Disponibilit√©s par niveau de puissance")
                print("   ‚Ä¢ Classifications temporelles")
                print("   ‚Ä¢ Opportunit√©s d'achat optimales")
                print("   ‚Ä¢ Statistiques compl√®tes")
                
                # G√©n√©rer l'analyse des cr√©neaux optimaux
                print("\nüîç G√©n√©ration de l'analyse des cr√©neaux optimaux...")
                seuils_analyses = [25, 30, 40]  # Diff√©rents seuils de prix
                
                for seuil in seuils_analyses:
                    print(f"\n   ‚Üí Analyse pour seuil ‚â§ {seuil} ‚Ç¨/MWh")
                    fichier_synthese = generer_analyse_creneaux_optimaux(
                        fichier_donnees_spot=resultat,
                        seuil_prix_max=seuil
                    )
                    if fichier_synthese:
                        print(f"   ‚úÖ Synth√®se g√©n√©r√©e: {fichier_synthese}")
    
    print("\nüéâ Script termin√© avec succ√®s!") 