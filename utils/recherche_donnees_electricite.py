"""
Script de recherche de donn√©es √©lectricit√© fran√ßaise
Combine recherches web cibl√©es et API RTE √©CO2mix pour donn√©es spot et puissance
"""

import requests
import json
import time
import pandas as pd
from datetime import datetime, timedelta
from urllib.parse import quote_plus, urljoin
import os
from bs4 import BeautifulSoup
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class RechercheElectriciteFrance:
    """
    Classe pour rechercher des donn√©es d'√©lectricit√© fran√ßaise via web scraping et API
    """
    
    def __init__(self, rte_api_key=None):
        """
        Initialise la classe avec les param√®tres de recherche
        
        Args:
            rte_api_key (str): Cl√© API RTE pour acc√®s √©CO2mix (optionnel)
        """
        self.rte_api_key = rte_api_key
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # URLs de base pour les recherches
        self.sites_cibles = [
            'rte-france.com',
            'services-rte.com', 
            'epexspot.com'
        ]
        
        # API RTE √©CO2mix
        self.rte_api_base = 'https://digital.iservices.rte-france.com/open_api/ecowatt/v4/'
        self.rte_data_api = 'https://odre.opendatasoft.com/api/records/1.0/search/'
    
    def recherche_web_donnees_spot(self, terme_recherche=None):
        """
        Effectue une recherche web cibl√©e sur les sites RTE et EPEX SPOT
        
        Args:
            terme_recherche (str): Terme de recherche personnalis√© ou utilise le d√©faut
            
        Returns:
            dict: R√©sultats de recherche organis√©s par site
        """
        if terme_recherche is None:
            terme_recherche = "prix spot √©lectricit√© France 2021-2025 donn√©es historiques heures disponibilit√© puissance 0.5-5 MW"
        
        logger.info(f"üîç D√©marrage recherche web: {terme_recherche}")
        
        resultats = {}
        
        # Construction de la requ√™te Google avec restriction de sites
        sites_query = " OR ".join([f"site:{site}" for site in self.sites_cibles])
        requete_complete = f"({sites_query}) {terme_recherche}"
        
        # URL de recherche Google (Note: pour usage r√©el, pr√©f√©rer API Google Search)
        google_url = f"https://www.google.com/search?q={quote_plus(requete_complete)}"
        
        try:
            logger.info("üì° Envoi de la requ√™te de recherche...")
            response = self.session.get(google_url, timeout=10)
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # Extraction des r√©sultats (structure simplifi√©e)
                resultats_bruts = soup.find_all('div', class_='g')
                
                for site in self.sites_cibles:
                    resultats[site] = []
                    
                for resultat in resultats_bruts[:10]:  # Limiter aux 10 premiers
                    try:
                        lien_elem = resultat.find('a')
                        if lien_elem and 'href' in lien_elem.attrs:
                            url = lien_elem['href']
                            
                            # D√©terminer le site source
                            site_source = None
                            for site in self.sites_cibles:
                                if site in url:
                                    site_source = site
                                    break
                            
                            if site_source:
                                titre_elem = resultat.find('h3')
                                titre = titre_elem.text if titre_elem else "Sans titre"
                                
                                description_elem = resultat.find('span', class_='st')
                                description = description_elem.text if description_elem else "Pas de description"
                                
                                resultats[site_source].append({
                                    'titre': titre,
                                    'url': url,
                                    'description': description[:200] + "..." if len(description) > 200 else description
                                })
                    except Exception as e:
                        logger.warning(f"Erreur lors de l'extraction d'un r√©sultat: {e}")
                        continue
                        
            else:
                logger.error(f"Erreur HTTP lors de la recherche: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la recherche web: {e}")
            resultats['erreur'] = str(e)
        
        return resultats
    
    def recherche_api_rte_eco2mix(self, date_debut='2021-01-01', date_fin='2025-07-10', granularite='hourly'):
        """
        Recherche de donn√©es via l'API RTE √©CO2mix (via Open Data RTE)
        
        Args:
            date_debut (str): Date de d√©but au format YYYY-MM-DD
            date_fin (str): Date de fin au format YYYY-MM-DD
            granularite (str): Granularit√© des donn√©es ('hourly', 'daily')
            
        Returns:
            pd.DataFrame: Donn√©es de prix spot et puissance disponible
        """
        logger.info(f"üîå Recherche API RTE √©CO2mix de {date_debut} √† {date_fin}")
        
        try:
            # Construction des param√®tres pour l'API Open Data RTE
            # Utilisation du bon format de date pour l'API
            params = {
                'dataset': 'eco2mix-national-tr',  # Dataset temps r√©el national
                'q': '',
                'facet': ['nature'],
                'timezone': 'Europe/Paris',
                'rows': 1000,  # Limite de r√©sultats r√©duite pour test
                'start': 0,
                'format': 'json'
            }
            
            # Ajouter un filtre de date si n√©cessaire (format diff√©rent)
            # Pour les tests, on va d'abord essayer sans filtre de date sp√©cifique
            
            logger.info("üì° Appel API Open Data RTE...")
            response = self.session.get(self.rte_data_api, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # Extraction des enregistrements
                records = data.get('records', [])
                
                if not records:
                    logger.warning("‚ö†Ô∏è Aucune donn√©e trouv√©e dans la r√©ponse API")
                    return pd.DataFrame()
                
                # Conversion en DataFrame
                donnees_brutes = []
                for record in records:
                    fields = record.get('fields', {})
                    donnees_brutes.append(fields)
                
                df = pd.DataFrame(donnees_brutes)
                
                # Traitement des donn√©es pour analyse de puissance disponible
                df = self._traiter_donnees_puissance(df)
                
                logger.info(f"‚úÖ {len(df)} enregistrements r√©cup√©r√©s depuis l'API RTE")
                return df
                
            else:
                logger.error(f"‚ùå Erreur API RTE: {response.status_code}")
                logger.error(f"R√©ponse: {response.text[:500]}")
                return pd.DataFrame()
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'appel API RTE: {e}")
            return pd.DataFrame()
    
    def _traiter_donnees_puissance(self, df):
        """
        Traite les donn√©es pour calculer la disponibilit√© de puissance 0.5-5 MW
        
        Args:
            df (pd.DataFrame): Donn√©es brutes de l'API
            
        Returns:
            pd.DataFrame: Donn√©es enrichies avec calculs de puissance
        """
        if df.empty:
            return df
            
        logger.info("‚ö° Calcul des puissances disponibles...")
        
        # Puissances cibles en MW
        puissances_mw = [0.5, 1, 2, 3, 4, 5]
        
        # Seuils de prix pour analyse √©conomique (‚Ç¨/MWh)
        seuils_prix = [10, 15, 20, 25, 30, 35, 40, 50]
        
        # Calcul de disponibilit√© par niveau de puissance et seuil de prix
        for puissance in puissances_mw:
            for seuil in seuils_prix:
                col_name = f'disponible_{puissance}MW_max_{seuil}EUR'
                
                # Logique simplifi√©e : disponibilit√© bas√©e sur prix spot
                # √Ä adapter selon les vraies colonnes de l'API RTE
                if 'prix_spot' in df.columns:
                    df[col_name] = (df['prix_spot'] <= seuil).astype(int)
                else:
                    # Valeur par d√©faut si pas de donn√©es de prix
                    df[col_name] = 1
        
        # Classification des cr√©neaux horaires
        if 'date_heure' in df.columns:
            df['date_heure'] = pd.to_datetime(df['date_heure'])
            df['heure'] = df['date_heure'].dt.hour
            df['jour_semaine'] = df['date_heure'].dt.dayofweek
            df['mois'] = df['date_heure'].dt.month
            
            # Classification des cr√©neaux optimaux
            def classifier_creneau(row):
                heure = row['heure']
                jour = row['jour_semaine']
                
                # Heures creuses g√©n√©ralement favorables
                if 2 <= heure <= 6:
                    return "Tr√®s favorable"
                elif (22 <= heure <= 23) or (0 <= heure <= 1):
                    return "Favorable"
                elif 12 <= heure <= 14:  # Midi solaire
                    return "Mod√©r√©"
                elif (8 <= heure <= 10) or (18 <= heure <= 20):  # Heures de pointe
                    return "D√©favorable"
                else:
                    return "Neutre"
            
            df['classification_creneau'] = df.apply(classifier_creneau, axis=1)
        
        return df
    
    def recherche_api_rte_authentifiee(self, endpoint='spot-prices', params=None):
        """
        Appel API RTE avec authentification (n√©cessite cl√© API)
        
        Args:
            endpoint (str): Point d'API √† appeler
            params (dict): Param√®tres de la requ√™te
            
        Returns:
            dict: R√©ponse de l'API
        """
        if not self.rte_api_key:
            logger.error("‚ùå Cl√© API RTE requise pour cet appel")
            return None
        
        if params is None:
            params = {
                'country': 'FR',
                'start_date': '2021-01-01',
                'end_date': '2025-07-10',
                'granularity': 'hourly',
                'power_levels': '0.5,1,2,3,4,5'
            }
        
        headers = {
            'Authorization': f'Bearer {self.rte_api_key}',
            'Content-Type': 'application/json'
        }
        
        url = urljoin(self.rte_api_base, endpoint)
        
        try:
            logger.info(f"üîê Appel API RTE authentifi√©: {endpoint}")
            response = self.session.get(url, params=params, headers=headers, timeout=30)
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"‚ùå Erreur API authentifi√©e: {response.status_code}")
                logger.error(f"R√©ponse: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'appel API authentifi√©: {e}")
            return None
    
    def analyser_resultats_complets(self, resultats_web=None, donnees_api=None):
        """
        Analyse compl√®te des r√©sultats de recherche web et API
        
        Args:
            resultats_web (dict): R√©sultats de recherche web
            donnees_api (pd.DataFrame): Donn√©es API
            
        Returns:
            dict: Rapport d'analyse complet
        """
        logger.info("üìä G√©n√©ration du rapport d'analyse...")
        
        rapport = {
            'timestamp': datetime.now().isoformat(),
            'recherche_web': {},
            'donnees_api': {},
            'recommandations': []
        }
        
        # Analyse des r√©sultats web
        if resultats_web:
            rapport['recherche_web'] = {
                'sites_analyses': list(resultats_web.keys()),
                'total_resultats': sum(len(resultats_web.get(site, [])) for site in self.sites_cibles),
                'resultats_par_site': {
                    site: len(resultats_web.get(site, [])) 
                    for site in self.sites_cibles
                }
            }
        
        # Analyse des donn√©es API
        if donnees_api is not None and not donnees_api.empty:
            rapport['donnees_api'] = {
                'nombre_enregistrements': len(donnees_api),
                'periode_couverte': {
                    'debut': donnees_api['date_heure'].min().isoformat() if 'date_heure' in donnees_api.columns else 'N/A',
                    'fin': donnees_api['date_heure'].max().isoformat() if 'date_heure' in donnees_api.columns else 'N/A'
                },
                'colonnes_disponibles': list(donnees_api.columns)
            }
            
            # Analyse de disponibilit√© par puissance
            colonnes_puissance = [col for col in donnees_api.columns if 'disponible_' in col and 'MW' in col]
            if colonnes_puissance:
                rapport['donnees_api']['analyse_puissance'] = {}
                for col in colonnes_puissance[:5]:  # Limiter l'affichage
                    taux_disponibilite = donnees_api[col].mean() * 100
                    rapport['donnees_api']['analyse_puissance'][col] = f"{taux_disponibilite:.1f}%"
        
        # Recommandations
        if rapport['recherche_web'].get('total_resultats', 0) > 0:
            rapport['recommandations'].append("‚úÖ Sources web identifi√©es - explorer manuellement les liens trouv√©s")
        
        if rapport['donnees_api'].get('nombre_enregistrements', 0) > 1000:
            rapport['recommandations'].append("‚úÖ Volume de donn√©es API suffisant pour analyse")
        else:
            rapport['recommandations'].append("‚ö†Ô∏è Volume de donn√©es API limit√© - v√©rifier les param√®tres de requ√™te")
        
        return rapport
    
    def sauvegarder_resultats(self, resultats_web=None, donnees_api=None, rapport=None, prefixe="recherche_electricite"):
        """
        Sauvegarde tous les r√©sultats dans des fichiers
        
        Args:
            resultats_web (dict): R√©sultats web √† sauvegarder
            donnees_api (pd.DataFrame): Donn√©es API √† sauvegarder
            rapport (dict): Rapport d'analyse √† sauvegarder
            prefixe (str): Pr√©fixe pour les noms de fichiers
        """
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # Sauvegarde des r√©sultats web
        if resultats_web:
            fichier_web = f"{prefixe}_web_{timestamp}.json"
            with open(fichier_web, 'w', encoding='utf-8') as f:
                json.dump(resultats_web, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ R√©sultats web sauvegard√©s: {fichier_web}")
        
        # Sauvegarde des donn√©es API
        if donnees_api is not None and not donnees_api.empty:
            fichier_api = f"{prefixe}_api_{timestamp}.csv"
            donnees_api.to_csv(fichier_api, index=False)
            logger.info(f"üíæ Donn√©es API sauvegard√©es: {fichier_api}")
        
        # Sauvegarde du rapport
        if rapport:
            fichier_rapport = f"{prefixe}_rapport_{timestamp}.json"
            with open(fichier_rapport, 'w', encoding='utf-8') as f:
                json.dump(rapport, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ Rapport sauvegard√©: {fichier_rapport}")


def main():
    """
    Fonction principale pour ex√©cuter les recherches
    """
    print("üöÄ D√©marrage de la recherche de donn√©es √©lectricit√© fran√ßaise")
    print("=" * 60)
    
    # Initialisation
    # Pour l'API RTE authentifi√©e, remplacer None par votre cl√© API
    rte_api_key = os.getenv('RTE_API_KEY')  # Ou d√©finir directement: "VOTRE_CLE_API"
    
    recherche = RechercheElectriciteFrance(rte_api_key=rte_api_key)
    
    # 1. Recherche web cibl√©e
    print("\nüîç √âTAPE 1: Recherche web sur sites sp√©cialis√©s")
    print("-" * 40)
    
    terme_recherche = "prix spot √©lectricit√© France 2021-2025 donn√©es historiques heures disponibilit√© puissance 0.5-5 MW"
    resultats_web = recherche.recherche_web_donnees_spot(terme_recherche)
    
    # Affichage des r√©sultats web
    for site, resultats in resultats_web.items():
        if isinstance(resultats, list) and resultats:
            print(f"\nüìã {site}: {len(resultats)} r√©sultat(s)")
            for i, res in enumerate(resultats[:3], 1):  # Afficher max 3 par site
                print(f"   {i}. {res['titre'][:80]}...")
                print(f"      URL: {res['url']}")
    
    # 2. Recherche API RTE √©CO2mix
    print("\n\nüîå √âTAPE 2: Recherche via API RTE √©CO2mix")
    print("-" * 40)
    
    donnees_api = recherche.recherche_api_rte_eco2mix(
        date_debut='2021-01-01',
        date_fin='2025-07-10',
        granularite='hourly'
    )
    
    if not donnees_api.empty:
        print(f"‚úÖ {len(donnees_api)} enregistrements r√©cup√©r√©s")
        print(f"üìä Colonnes disponibles: {len(donnees_api.columns)}")
        print("üîç Aper√ßu des premi√®res lignes:")
        print(donnees_api.head(3).to_string())
    else:
        print("‚ö†Ô∏è Aucune donn√©e r√©cup√©r√©e via l'API")
    
    # 3. Analyse compl√®te
    print("\n\nüìä √âTAPE 3: Analyse des r√©sultats")
    print("-" * 40)
    
    rapport = recherche.analyser_resultats_complets(resultats_web, donnees_api)
    
    print("üìã R√âSUM√â DU RAPPORT:")
    print(f"   ‚Ä¢ Total r√©sultats web: {rapport['recherche_web'].get('total_resultats', 0)}")
    print(f"   ‚Ä¢ Enregistrements API: {rapport['donnees_api'].get('nombre_enregistrements', 0)}")
    print("\nüéØ RECOMMANDATIONS:")
    for rec in rapport['recommandations']:
        print(f"   {rec}")
    
    # 4. Sauvegarde
    print("\n\nüíæ √âTAPE 4: Sauvegarde des r√©sultats")
    print("-" * 40)
    
    recherche.sauvegarder_resultats(
        resultats_web=resultats_web,
        donnees_api=donnees_api,
        rapport=rapport
    )
    
    print("\n‚úÖ Recherche termin√©e avec succ√®s!")
    print("=" * 60)


if __name__ == "__main__":
    main() 